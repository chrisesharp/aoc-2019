from math import floor

class Processor():
    memory = []
    ip = 0
    stdin = None
    stdout = []

    def __init__(self, instructions):
        self.memory = instructions[:]
    
    def run(self, stdin):
        self.stdin = stdin
        instr = self.fetch()
        while instr[0] != 99:
            self.execute(instr)
            instr = self.fetch()
            
        return self.stdout.pop()
    
    def fetch(self):
        adv = 4
        opcode = self.get_opcode(self.ip)
        
        if opcode == 99:
            adv = 1
        elif (opcode == 3) or (opcode == 4):
            adv = 2
        elif (opcode == 5) or (opcode == 6):
            adv = 3
            
        instruction = self.memory[self.ip:self.ip+adv]
        self.ip += adv
        return instruction

    def get_opcode(self, ip):
        opcode = self.memory[ip]
        if opcode > 99:
            opcode = opcode%100
        return opcode
    
    def execute(self, instr):
        opcode = int(instr[0])
        parms = instr[1:]
        mode = [0,0,0]
        if opcode > 99:
            mode = demarshall(floor(opcode/100))
            opcode = opcode%100
        
        if opcode == 1:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]
            
            if mode[1] == 1:
                B = int(parms[1])
            else:
                B = self.memory[int(parms[1])]
            
            C = int(parms[2])
            self.memory[C] = A + B

        elif opcode == 2:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]
            
            if mode[1] == 1:
                B = int(parms[1])
            else:
                B = self.memory[int(parms[1])]
            
            C = int(parms[2])
            self.memory[C] = A * B

        elif opcode == 3:
            A = int(parms[0])
            
            self.memory[A] = self.stdin
        
        elif opcode == 4:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]
            
            self.stdout.append(A)
        
        elif opcode == 5:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]
            
            if mode[1] == 1:
                B = int(parms[1])
            else:
                B = self.memory[int(parms[1])]
            
            if A != 0:
                self.ip = B
        
        elif opcode == 6:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]
            
            if mode[1] == 1:
                B = int(parms[1])
            else:
                B = self.memory[int(parms[1])]
            
            if A == 0:
                self.ip = B
        
        elif opcode == 7:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]

            if mode[1] == 1:
                B = int(parms[1])
            else:
                B = self.memory[int(parms[1])]
            
            C = int(parms[2])
            
            if A < B:
                self.memory[C] = 1
            else:
                self.memory[C] = 0

        elif opcode == 8:
            if mode[0] == 1:
                A = int(parms[0])
            else:
                A = self.memory[int(parms[0])]

            if mode[1] == 1:
                B = int(parms[1])
            else:
                B = self.memory[int(parms[1])]
            
            C = int(parms[2])

            if A == B:
                self.memory[C] = 1
            else:
                self.memory[C] = 0
            

def demarshall(mode):
    flags = [0,0,0]
    for i in range(len(flags)):
        flags[i] = mode%10
        mode = floor(mode/10)
    return flags

if __name__ == '__main__':
    instructions = [3,225,1,225,6,6,1100,1,238,225,104,0,2,106,196,224,101,-1157,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1002,144,30,224,1001,224,-1710,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,101,82,109,224,1001,224,-111,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,10,50,225,1102,48,24,224,1001,224,-1152,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1102,44,89,225,1101,29,74,225,1101,13,59,225,1101,49,60,225,1101,89,71,224,1001,224,-160,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1101,27,57,225,102,23,114,224,1001,224,-1357,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,1001,192,49,224,1001,224,-121,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1102,81,72,225,1102,12,13,225,1,80,118,224,1001,224,-110,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,677,226,224,102,2,223,223,1005,224,329,101,1,223,223,108,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,359,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,389,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,404,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,1008,226,226,224,102,2,223,223,1006,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1005,224,509,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,539,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,584,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,599,101,1,223,223,108,677,677,224,102,2,223,223,1006,224,614,101,1,223,223,1008,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,659,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,674,1001,223,1,223,4,223,99,226]
    processor = Processor(instructions)
    print("Part 1:")
    output = processor.run(1)
    print(output)
    print("Part 2:")
    instructions = [3,225,1,225,6,6,1100,1,238,225,104,0,2,106,196,224,101,-1157,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1002,144,30,224,1001,224,-1710,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,101,82,109,224,1001,224,-111,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,10,50,225,1102,48,24,224,1001,224,-1152,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1102,44,89,225,1101,29,74,225,1101,13,59,225,1101,49,60,225,1101,89,71,224,1001,224,-160,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1101,27,57,225,102,23,114,224,1001,224,-1357,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,1001,192,49,224,1001,224,-121,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1102,81,72,225,1102,12,13,225,1,80,118,224,1001,224,-110,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,677,226,224,102,2,223,223,1005,224,329,101,1,223,223,108,226,226,224,102,2,223,223,1006,224,344,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,359,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,389,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,404,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,1008,226,226,224,102,2,223,223,1006,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1005,224,509,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,539,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,584,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,599,101,1,223,223,108,677,677,224,102,2,223,223,1006,224,614,101,1,223,223,1008,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,659,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,674,1001,223,1,223,4,223,99,226]
    processor = Processor(instructions)
    print(processor.run(5))